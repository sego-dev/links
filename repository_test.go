package link

import (
	"bufio"
	"bytes"
	"fmt"
	"runtime"
	"strings"
	"testing"

	"github.com/google/uuid"
)

type labeledContent struct {
	label   string
	content string
}

func CallerInfo() []string {

	pc := uintptr(0)
	file := ""
	line := 0
	ok := false
	name := ""

	callers := []string{}
	for i := 0; ; i++ {
		pc, file, line, ok = runtime.Caller(i)
		if !ok {
			// The breaks below failed to terminate the loop, and we ran off the
			// end of the call stack.
			break
		}

		// This is a huge edge case, but it will panic if this is the case, see #180
		if file == "<autogenerated>" {
			break
		}

		f := runtime.FuncForPC(pc)
		if f == nil {
			break
		}
		name = f.Name()

		// testing.tRunner is the standard library function that calls
		// tests. Subtests are called directly by tRunner, without going through
		// the Test/Benchmark/Example function that contains the t.Run calls, so
		// with subtests we should break when we hit tRunner, without adding it
		// to the list of callers.
		if name == "testing.tRunner" {
			break
		}

		parts := strings.Split(file, "/")
		file = parts[len(parts)-1]
		if len(parts) > 1 {
			dir := parts[len(parts)-2]
			if (dir != "assert" && dir != "mock" && dir != "require") || file == "mock_test.go" {
				callers = append(callers, fmt.Sprintf("%s:%d", file, line))
			}
		}

	}

	return callers
}

func assertEqual(t *testing.T, a interface{}, b interface{}, message string) {
	content := []labeledContent{
		{"Error Trace", strings.Join(CallerInfo(), "\n\r\t\t\t")},
		{"Error", message},
	}
	if a == b {
		return
	}
	if len(message) == 0 {
		message = fmt.Sprintf("%v != %v", a, b)
	}
	t.Fatalf("%s", message+getWhitespaceString()+labeledOutput(content...))
}

func indentMessageLines(message string, longestLabelLen int) string {
	outBuf := new(bytes.Buffer)

	for i, scanner := 0, bufio.NewScanner(strings.NewReader(message)); scanner.Scan(); i++ {
		// no need to align first line because it starts at the correct location (after the label)
		if i != 0 {
			// append alignLen+1 spaces to align with "{{longestLabel}}:" before adding tab
			outBuf.WriteString("\n\r\t" + strings.Repeat(" ", longestLabelLen+1) + "\t")
		}
		outBuf.WriteString(scanner.Text())
	}

	return outBuf.String()
}

func labeledOutput(content ...labeledContent) string {
	longestLabel := 0
	for _, v := range content {
		if len(v.label) > longestLabel {
			longestLabel = len(v.label)
		}
	}
	var output string
	for _, v := range content {
		output += "\r\t" + v.label + ":" + strings.Repeat(" ", longestLabel-len(v.label)) + "\t" + indentMessageLines(v.content, longestLabel) + "\n"
	}
	return output
}

func assertNotEqual(t *testing.T, a interface{}, b interface{}, message string) {
	if a != b {
		return
	}
	if len(message) == 0 {
		message = fmt.Sprintf("%v != %v", a, b)
	}

	t.Fatal(message)
}

// getWhitespaceString returns a string that is long enough to overwrite the default
// output from the go testing framework.
func getWhitespaceString() string {

	_, file, line, ok := runtime.Caller(1)
	if !ok {
		return ""
	}
	parts := strings.Split(file, "/")
	file = parts[len(parts)-1]

	return strings.Repeat(" ", len(fmt.Sprintf("%s:%d:        ", file, line)))

}

func TestCreateOrUpdate(t *testing.T) {
	var rep repository
	var id = rep.CreateOrUpdate(&link{
		ID:           uuid.New(),
		OriginalLink: "http://example.com",
		ShortedLink:  "http://s.ln/1",
	})
	assertEqual(t, id, int64(1), "")
}

func TestCreateOrUpdateDouble(t *testing.T) {
	var rep repository
	var id1 = uuid.New()
	var id2 = uuid.New()
	var id = rep.CreateOrUpdate(&link{
		ID:           id1,
		OriginalLink: "http://example.com",
		ShortedLink:  "http://s.ln/1",
	})

	id = rep.CreateOrUpdate(&link{
		ID:           id2,
		OriginalLink: "http://example.com",
		ShortedLink:  "http://s.ln/2",
	})
	assertEqual(t, id, id2, "")
}

func TestRead(t *testing.T) {
	var rep repository
	rep.DeleteAll()
	var id = rep.CreateOrUpdate(&link{
		ID:           uuid.New(),
		OriginalLink: "http://example.com",
		ShortedLink:  "http://s.ln/1",
	})
	var links = rep.Read([]uuid.UUID{id})
	assertEqual(t, len(links), 1, "")
}

func TestGetByShortLink(t *testing.T) {
	var rep repository
	rep.DeleteAll()
	rep.CreateOrUpdate(&link{
		ID:           uuid.New(),
		OriginalLink: "http://example.com",
		ShortedLink:  "http://s.ln/1",
	})
	rep.CreateOrUpdate(&link{
		ID:           uuid.New(),
		OriginalLink: "http://example2.com",
		ShortedLink:  "http://s.ln/2",
	})

	var link, _ = rep.GetByShortLink("http://s.ln/1")
	assertEqual(t, link.OriginalLink, "http://example.com", "")
}
